<?php


/**
 * Implements hook_views_api().
 */
function draggableviews_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'draggableviews') . '/views',
  );
}

/**
 * Implementes hook_preprocess_views_view_table().
 */
function draggableviews_preprocess_views_view_table(&$vars) {
  // Check whether this table view has draggableview field.
  if (!isset($vars['view']->field['draggableviews'])) {
    return;
  }

  // Add table class.
  $vars['classes_array'][] = 'draggable';

  // Add row class.
  foreach ($vars['row_classes'] as &$row_classes) {
    $row_classes[] = 'draggable';
  }

  // TODO: Change to better unique id.
  $vars['attributes_array']['id'] = 'draggableviews-table' . rand(0, 1000);
  // Add javascript.
  drupal_add_tabledrag($vars['attributes_array']['id'], 'order', 'sibling', 'draggableviews-weight');
}

/**
 * Implements hook_views_form_submit().
 *
 * Save weight records after form submit.
 */
function draggableviews_views_form_submit($form, &$form_state) {
  $fv = $form_state['values'];

  $view = $fv['view'];
  $view_name = $view->name;
  $view_display = $view->current_display;
  $args_string = json_encode($view->args);

  // Save records to our custom table.
  foreach ($fv['draggableviews'] as $item) {
    // Delete previous order record.
    db_query('DELETE FROM {draggableviews_structure} WHERE
      view_name = :view_name
      AND view_display = :view_display
      AND args = :args
      AND entity_id = :entity_id', array(
        ':view_name' => $view_name,
        ':view_display' => $view_display,
        ':args' => $args_string,
        ':entity_id' => $item['id'],
      ));
    // Create new order record.
    $record = array(
      'view_name' => $view_name,
      'view_display' => $view_display,
      'args' => $args_string,
      'entity_id' => $item['id'],
      'weight' => $item['weight'],
    );
    drupal_write_record('draggableviews_structure', $record);
  }

  // Trigger the event "A view has been sorted"
  if (module_exists('rules')) {
    rules_invoke_event('draggableviews_rules_event_sorted', $view->name);
  }
}

/**
 * Implements hook_form_alter().
 *
 * Alter views form to change button label.
 */
function draggableviews_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['draggableviews']) && !empty($form['draggableviews'])) {
    $label = $form['view']['#value']->field['draggableviews']->options['draggableviews']['save_button_label'];
    $form['actions']['submit']['#value'] = t($label);
  }
}
